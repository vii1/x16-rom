MEMORY {
	# zero page
	#         start = $0000, size = $0080; # available to the user (or GEOS)
	ZPKERNAL: start = $0080, size = $0014; # KERNAL
	ZPCBDOS:  start = $0094, size = $0011; # CBDOS
	#         start = $00A5, size = $0004; # reserved for CBDOS or BASIC growth
	ZPFPLIB:  start = $00A9, size = $002B; # FPLIB
	ZPBASIC:  start = $00D4, size = $002B; # BASIC (last byte used: $FE)

	# $0200-$02FF: always-available variables and RAM code
	KVAR:     start = $0200, size = $00B1; # KERNAL
	#         start = $02B1, size = $0013; # reserved for KERNAL growth
	KERNRAM:  start = $02C4, size = $0020; # KERNAL RAM code
	GDRVVEC:  start = $02E4, size = $001C; # GRAPH_LL vectors

	# $0300-$0333: vectors
	BVECTORS: start = $0300, size = $0013; # BASIC vectors
	KVECTORS: start = $0314, size = $0020; # KERNAL vectors
	
	# $0334-$03FF: variables and RAM code (not available for *legacy* GEOS apps)
	KVAR2:    start = $0334, size = $0057; # KERNAL: screen editor table
	KERNRAM2: start = $038B, size = $0029; # KERNAL: banked IRQ, fetch, stash
	#         start = $03B4, size = $0018; # reserved for KERNAL growth
	FPVARS:   start = $03CC, size = $0009; # FPLIB
	BVARS:    start = $03D5, size = $002B; # BASIC

	# KERNAL bank #0 vars
	KVARSB0:  start = $A000, size = $2000;

	# MONITOR
	L0220:    start = $0220, size = $0039; # overlaps with top end of BASIC input line only

	# CBDOS
	CBDOSDAT: start = $A000, size = $2000;

	# GEOS
	# disk driver, only contains JMPs, will be removed
	DRV:      start = $9000, size = $0D00;
	# variables, only used by disk & UI, not by graphics and fonts
	VARS:     start = $9D00, size = $0200;

	# Bank 0 (KERNAL)
	KERNAL:   start = $C000, size = $3EE1, fill=yes, fillval=$AA;
	JMPTBL:   start = $FEE1, size = $0119, fill=yes, fillval=$AA;
	VECTORS:  start = $FFFA, size = $0006, fill=yes, fillval=$AA;

	# Bank 1 (KEYMAPS)
	KEYMAPS:  start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQA:     start = $FFFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 2 (CBDOS)
	CBDOS:    start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQB:     start = $FFFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 3 (GEOS)
	LOKERNAL:     start = $C000, size = $0100, fill=yes, fillval=$AA;
	GKERNAL:      start = $C100, size = $3EFA, fill=yes, fillval=$AA;
	GVECTORS:     start = $FFFA, size = $0006, fill=yes, fillval=$AA;

	# Bank 4 (BASIC)
	BASIC:     start = $C000, size = $3900, fill=yes, fillval=$AA;
	KSUP_CODE: start = $F900, size = $0300, fill=yes, fillval=$AA;
	FPJMP:     start = $FC00, size = $02E1, fill=yes, fillval=$AA;
	KSUP_VEC:  start = $FEE1, size = $011F, fill=yes, fillval=$AA;

	# Bank 5 (CHARSET)
	BANK5:      start = $C000, size = $3C00, fill=yes, fillval=$AA;
	KSUP_CODE2: start = $FC00, size = $02E1, fill=yes, fillval=$AA;
	KSUP_VEC2:  start = $FEE1, size = $011F, fill=yes, fillval=$AA;

	# Bank 6 (MONITOR)
	BANK6:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 7 (empty)
	BANK7:    start = $C000, size = $4000, fill=yes, fillval=$AA;
}

SEGMENTS {
	# BASIC
	ZPBASIC:  load = ZPBASIC,  type = zp;
	BVECTORS: load = BVECTORS, type = bss;
	BVARS:    load = BVARS,    type = bss;

	# FPLIB
	ZPFPLIB:  load = ZPFPLIB,  type = zp;
	FPVARS:   load = FPVARS,   type = bss;

	# KERNAL
	ZPKERNAL: load = ZPKERNAL, type = zp;
	ZPFONTS:  load = ZPKERNAL, type = zp;
	KVAR:     load = KVAR,     type = bss;
	FONTSVAR: load = KVAR,     type = bss;
	KVAR2:    load = KVAR2,    type = bss;
	GDRVVEC:  load = GDRVVEC,  type = bss;
	KVECTORS: load = KVECTORS, type = bss;
	KVARSB0:  load = KVARSB0,  type = bss;
	
	# GEOS
	vars:     load = VARS,     type = bss;
	
	# Bank 6 (CHARSET)
	CHARSET:    load = BANK6,    type = ro;
	CHARISO:    load = BANK6,    type = ro;
	CPYCHR:     load = BANK6,    type = ro;

	# Bank 5 (MONITOR)
	monitor_a:        load = BANK5, type = ro;
	monitor_b:        load = BANK5, type = ro;
	asmchars1:        load = BANK5, type = ro, define = yes;
	asmchars2:        load = BANK5, type = ro, define = yes;
	mnemos1:          load = BANK5, type = ro, define = yes;
	mnemos2:          load = BANK5, type = ro, define = yes;
	monitor_c:        load = BANK5, type = ro;
	monitor_ram_code: load = BANK5, run = L0220, type = ro, define = yes;
	KSUP_CODE2:       load = KSUP_CODE2, type = ro;
	KSUP_VEC2:        load = KSUP_VEC2,  type = ro;

	# Bank 4 (BASIC)
	BASIC:     load = BASIC,     type = ro;
	FPLIB:     load = BASIC,     type = ro;
	FPJMP:     load = FPJMP,     type = ro;
	KSUP_CODE: load = KSUP_CODE, type = ro;
	KSUP_VEC:  load = KSUP_VEC,  type = ro;

	# Bank 3 (GEOS)
	header:             load = LOKERNAL, type = ro;
	tobasic2:           load = LOKERNAL, type = ro;
	mainloop1:          load = LOKERNAL, type = ro;
	files2:             load = LOKERNAL, type = ro;
	jumptab:            load = GKERNAL, type = ro;
	start:              load = GKERNAL, type = ro;
	memory2:            load = GKERNAL, type = ro;
	ramexp1:            load = GKERNAL, type = ro;
	files1a2a:          load = GKERNAL, type = ro;
	files1a2b:          load = GKERNAL, type = ro;
	files1b:            load = GKERNAL, type = ro;
	serial1:            load = GKERNAL, type = ro;
	reu:                load = GKERNAL, type = ro;
	ramexp2:            load = GKERNAL, type = ro;
	tobasic1:           load = GKERNAL, type = ro;
	mouseptr:           load = GKERNAL, type = ro;
	dlgbox2:            load = GKERNAL, type = ro;
	mainloop3:          load = GKERNAL, type = ro;
	bitmask1:           load = GKERNAL, type = ro;
	bitmask2:           load = GKERNAL, type = ro;
	bitmask3:           load = GKERNAL, type = ro;
	files3:             load = GKERNAL, type = ro;
	mainloop2:          load = GKERNAL, type = ro;
	load1a:             load = GKERNAL, type = ro;
	load1b:             load = GKERNAL, type = ro;
	load1c:             load = GKERNAL, type = ro;
	load1d:             load = GKERNAL, type = ro;
	init1:              load = GKERNAL, type = ro;
	hw1a:               load = GKERNAL, type = ro;
	hw1b:               load = GKERNAL, type = ro;
	graph1:             load = GKERNAL, type = ro;
	hw2:                load = GKERNAL, type = ro;
	init2:              load = GKERNAL, type = ro;
	memory1a:           load = GKERNAL, type = ro;
	memory1b:           load = GKERNAL, type = ro;
	misc:               load = GKERNAL, type = ro;
	hw3:                load = GKERNAL, type = ro;
	load2:              load = GKERNAL, type = ro;
	graph2b:            load = GKERNAL, type = ro;
	graph2d:            load = GKERNAL, type = ro;
	graph2f:            load = GKERNAL, type = ro;
	graph2h:            load = GKERNAL, type = ro;
	inline:             load = GKERNAL, type = ro;
	graph2j:            load = GKERNAL, type = ro;
	graph2k:            load = GKERNAL, type = ro;
	graph2l1:           load = GKERNAL, type = ro;
	graph2l2:           load = GKERNAL, type = ro;
	graph2m:            load = GKERNAL, type = ro;
	graph2n:            load = GKERNAL, type = ro;
	process1:           load = GKERNAL, type = ro;
	process2:           load = GKERNAL, type = ro;
	process3a:          load = GKERNAL, type = ro;
	process3aa:         load = GKERNAL, type = ro;
	process3b:          load = GKERNAL, type = ro;
	process3c:          load = GKERNAL, type = ro;
	sprites:            load = GKERNAL, type = ro;
	math1a1:            load = GKERNAL, type = ro;
	math1a2:            load = GKERNAL, type = ro;
	math1b:             load = GKERNAL, type = ro;
	math1c1:            load = GKERNAL, type = ro;
	math1c2:            load = GKERNAL, type = ro;
	math1d:             load = GKERNAL, type = ro;
	mouse1:             load = GKERNAL, type = ro;
	panic1:             load = GKERNAL, type = ro;
	panic2:             load = GKERNAL, type = ro;
	panic3:             load = GKERNAL, type = ro;
	serial2:            load = GKERNAL, type = ro;
	patterns:           load = GKERNAL, type = ro;
	memory3:            load = GKERNAL, type = ro;
	load3:              load = GKERNAL, type = ro;
	files6a:            load = GKERNAL, type = ro;
	files6b:            load = GKERNAL, type = ro;
	files6c:            load = GKERNAL, type = ro;
	deskacc1:           load = GKERNAL, type = ro;
	load4b:             load = GKERNAL, type = ro;
	deskacc2:           load = GKERNAL, type = ro;
	files7:             load = GKERNAL, type = ro;
	deskacc3:           load = GKERNAL, type = ro;
	files8:             load = GKERNAL, type = ro;
	files9:             load = GKERNAL, type = ro;
	files10:            load = GKERNAL, type = ro;
	init4:              load = GKERNAL, type = ro;
	init3:              load = GKERNAL, type = ro;
	graph3a:            load = GKERNAL, type = ro;
	graph3b:            load = GKERNAL, type = ro;
	graph3c:            load = GKERNAL, type = ro;
	conio1:             load = GKERNAL, type = ro;
	conio2:             load = GKERNAL, type = ro;
	conio3a:            load = GKERNAL, type = ro;
	conio4:             load = GKERNAL, type = ro;
	conio5:             load = GKERNAL, type = ro;
	conio6:             load = GKERNAL, type = ro;
	math2:              load = GKERNAL, type = ro;
	mouse2:             load = GKERNAL, type = ro;
	menu1:              load = GKERNAL, type = ro;
	menu2:              load = GKERNAL, type = ro;
	menu3:              load = GKERNAL, type = ro;
	icon1:              load = GKERNAL, type = ro;
	mouse3:             load = GKERNAL, type = ro;
	icon2:              load = GKERNAL, type = ro;
	dlgbox1a:           load = GKERNAL, type = ro;
	dlgbox1b:           load = GKERNAL, type = ro;
	dlgbox1c:           load = GKERNAL, type = ro;
	dlgbox1d:           load = GKERNAL, type = ro;
	dlgbox1e1:          load = GKERNAL, type = ro;
	dlgbox1e2:          load = GKERNAL, type = ro;
	dlgbox1f:           load = GKERNAL, type = ro;
	dlgbox1g:           load = GKERNAL, type = ro;
	dlgbox1h:           load = GKERNAL, type = ro;
	dlgbox1i:           load = GKERNAL, type = ro;
	dlgbox1j:           load = GKERNAL, type = ro;
	dlgbox1k:           load = GKERNAL, type = ro;
	mouse4:             load = GKERNAL, type = ro;
	irq:                load = GKERNAL, type = ro;
	keyboard1:          load = GKERNAL, type = ro;
	keyboard2:          load = GKERNAL, type = ro;
	keyboard3:          load = GKERNAL, type = ro;
	time1:              load = GKERNAL, type = ro;
	time2:              load = GKERNAL, type = ro;
	drvcbdos:           load = GKERNAL, run = DRV, type = ro, define = yes;
	entry:              load = GKERNAL, type = ro;
	vectors:            load = GVECTORS, type = ro;

	# Bank 2 (CBDOS)
	ZPCBDOS:    load = ZPCBDOS,  type = zp;
	cbdos:      load = CBDOS,    type = ro;
	CODE:       load = CBDOS,    type = ro;
	cbdos_data: load = CBDOSDAT, type = bss;
	IRQB:       load = IRQB,     type = ro;

	# Bank 1 (KEYMAPS)
	KBDMETA:    load = KEYMAPS,  type = ro;
	KBDTABLES:  load = KEYMAPS,  type = ro;
	IKBDMETA:   load = KEYMAPS,  type = ro;
	IKBDTABLES: load = KEYMAPS,  type = ro;
	IRQA:       load = IRQA,     type = ro;

	# Bank 0 (KERNAL)
	# KERNAL
	EDITOR:   load = KERNAL,   type = ro;
	PS2:      load = KERNAL,   type = ro;
	PS2KBD:   load = KERNAL,   type = ro;
	PS2MOUSE: load = KERNAL,   type = ro;
	JOYSTICK: load = KERNAL,   type = ro;
	SERIAL:   load = KERNAL,   type = ro;
	RS232:    load = KERNAL,   type = ro;
	MESSAGES: load = KERNAL,   type = ro;
	CHANNEL:  load = KERNAL,   type = ro;
	TIME:     load = KERNAL,   type = ro;
	ERROR:    load = KERNAL,   type = ro;
	INIT:     load = KERNAL,   type = ro;
	RS232NMI: load = KERNAL,   type = ro;
	IRQFILE:  load = KERNAL,   type = ro;
	ROUTINES: load = KERNAL,   type = ro;
	GRAPH:    load = KERNAL,   type = ro;
	VERA_DRV: load = KERNAL,   type = ro;
	KERNRAM:  load = KERNAL,   run = KERNRAM,  type = ro, define = yes;
	KERNRAM2: load = KERNAL,   run = KERNRAM2, type = ro, define = yes;
	JMPTBL:   load = JMPTBL,   type = ro;
	VECTORS:  load = VECTORS,  type = ro;
}
